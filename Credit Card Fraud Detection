import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
def load_data(file_path):
    """Load SMS dataset."""
    data = pd.read_csv(file_path, encoding='latin-1')
    data = data[['v1', 'v2']]  # Retain only label and text columns
    data.columns = ['label', 'message']
    print(f"Dataset size: {data.shape}")
    return data

# Preprocess data
def preprocess_data(data):
    """Convert labels to binary and split data."""
    data['label'] = data['label'].map({'ham': 0, 'spam': 1})  # Convert labels to 0 (ham) and 1 (spam)
    X = data['message']
    y = data['label']
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Feature extraction
def extract_features(train, test):
    """Convert text into TF-IDF features."""
    vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)
    X_train_tfidf = vectorizer.fit_transform(train)
    X_test_tfidf = vectorizer.transform(test)
    return X_train_tfidf, X_test_tfidf, vectorizer

# Train classifiers
def train_models(X_train, y_train):
    """Train Naive Bayes, Logistic Regression, and SVM classifiers."""
    models = {
        'Naive Bayes': MultinomialNB(),
        'Logistic Regression': LogisticRegression(max_iter=200),
        'SVM': SVC(kernel='linear', probability=True)
    }
    
    for model_name, model in models.items():
        print(f"Training {model_name}...")
        model.fit(X_train, y_train)
        models[model_name] = model
    return models

# Evaluate models
def evaluate_models(models, X_test, y_test):
    """Evaluate all models and print performance metrics."""
    for model_name, model in models.items():
        y_pred = model.predict(X_test)
        print(f"--- {model_name} ---")
        print("Accuracy:", accuracy_score(y_test, y_pred))
        print("Classification Report:\n", classification_report(y_test, y_pred))

# Main function
if _name_ == '_main_':
    # Load and preprocess data
    file_path = 'spam.csv'  # Path to the dataset
    data = load_data(file_path)
    X_train, X_test, y_train, y_test = preprocess_data(data)
    
    # Feature extraction
    X_train_tfidf, X_test_tfidf, vectorizer = extract_features(X_train, X_test)
    
    # Train models
    models = train_models(X_train_tfidf, y_train)
    
    # Evaluate models
    evaluate_models(models, X_test_tfidf, y_test)
    
    # Test on new messages
    print("\nTest on new messages:")
    test_messages = ["Congratulations! You've won a free iPhone. Call now.", 
                     "Hey, are we still on for lunch?"]
    test_features = vectorizer.transform(test_messages)
    for model_name, model in models.items():
        predictions = model.predict(test_features)
        print(f"{model_name} predictions:", ["Spam" if p == 1 else "Ham" for p in predictions])
